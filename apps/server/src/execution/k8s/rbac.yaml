# Service account for Shadow server to manage remote VM pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shadow-remote-server-sa
  namespace: shadow-agents
  labels:
    app: shadow-remote
    component: server
---
# Service account for remote VM pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shadow-remote-vm-sa
  namespace: shadow-agents
  labels:
    app: shadow-remote
    component: vm
automountServiceAccountToken: false  # VMs don't need K8s API access
---
# Role for Shadow server to manage remote VM pods and services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: shadow-agents
  name: shadow-remote-server-role
rules:
# Pod management with privileged access for VMs
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create", "get", "list", "watch", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["pods/status"]
  verbs: ["get", "patch", "update"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
# Service management
- apiGroups: [""]
  resources: ["services"]
  verbs: ["create", "get", "list", "delete"]
# ConfigMaps for VM configuration
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "list", "delete", "patch", "update"]
# Secrets for VM authentication
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "list", "delete"]
# Persistent Volume Claims for VM storage
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["create", "get", "list", "delete"]
# Events (for debugging)
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list"]
# Node access for Firecracker node selection
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
---
# Bind the role to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shadow-remote-server-binding
  namespace: shadow-agents
subjects:
- kind: ServiceAccount
  name: shadow-remote-server-sa
  namespace: shadow-agents
roleRef:
  kind: Role
  name: shadow-remote-server-role
  apiGroup: rbac.authorization.k8s.io
---
# Cluster role for Firecracker VM pod security policy
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: shadow-remote-vm-psp-role
rules:
- apiGroups: ['node.k8s.io']
  resources: ['runtimeclasses']
  verbs: ['get', 'list', 'use']
---
# Bind PSP to VM service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: shadow-remote-vm-psp-binding
  namespace: shadow-agents
roleRef:
  kind: ClusterRole
  name: shadow-remote-vm-psp-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: shadow-remote-vm-sa
  namespace: shadow-agents