generator client {
  provider      = "prisma-client-js"
  output        = "../generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                  @id
  name                  String
  email                 String                  @unique
  emailVerified         Boolean
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  tasks                 Task[]
  accounts              Account[]
  sessions              Session[]
  CodebaseUnderstanding CodebaseUnderstanding[]
  memories              Memory[]
  userSettings          UserSettings?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  githubInstallationId  String?
  githubAppConnected    Boolean   @default(false)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Task {
  id    String @id @default(nanoid())
  title String

  // Repo full name "owner/repo"
  repoFullName String
  // Repo URL "https://github.com/owner/repo"
  repoUrl      String

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  baseBranch        String
  baseCommitSha     String
  githubIssueId     String?
  
  // Task-level status (overall container status)
  status            TaskStatus @default(INITIALIZING)
  
  // Model configuration for this task
  mainModel         String   @default("claude-3-5-sonnet-20241022")  // Primary model (first selected)
  models            String[] @default(["claude-3-5-sonnet-20241022"]) // All selected models array
  
  // Task-level cleanup scheduling
  scheduledCleanupAt DateTime?
  workspaceCleanedUp Boolean @default(false)

  // Relationships
  variants                    Variant[]     @relation("TaskVariants")
  messages                    ChatMessage[] @relation("TaskMessages")
  user                        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos                       Todo[]
  memories                    Memory[]
  stackedTaskCreationMessages ChatMessage[] @relation("StackedTask")

  codebaseUnderstandingId String?
  codebaseUnderstanding   CodebaseUnderstanding? @relation(fields: [codebaseUnderstandingId], references: [id])
}

model Variant {
  id                  String        @id @default(nanoid())
  taskId              String
  modelType           String
  sequence            Int
  shadowBranch        String
  workspacePath       String?
  status              VariantStatus @default(INITIALIZING)
  initStatus          InitStatus    @default(INACTIVE)
  scheduledCleanupAt  DateTime?
  initializationError String?
  errorMessage        String?
  workspaceCleanedUp  Boolean       @default(false)
  hasBeenInitialized  Boolean       @default(false)
  
  // PR management per variant
  pullRequestNumber   Int?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relationships
  task     Task          @relation("TaskVariants", fields: [taskId], references: [id], onDelete: Cascade)
  messages ChatMessage[] @relation("VariantMessages")
  sessions TaskSession[]
  todos    Todo[]
  memories Memory[]

  @@unique([taskId, sequence])
  @@index([taskId, status])
  @@index([status])
}

model RepositoryIndex {
  id            String   @id @default(cuid())
  repoFullName  String   @unique
  lastIndexedAt DateTime @default(now())
  lastCommitSha String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([repoFullName])
  @@map("repository_index")
}

model Todo {
  id        String     @default(cuid())
  content   String
  status    TodoStatus @default(PENDING)
  sequence  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  taskId    String
  variantId String?
  task      Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  variant   Variant?   @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([taskId, id])
  @@index([taskId, sequence])
  @@index([variantId, sequence])
  @@index([taskId, status])
}

model ChatMessage {
  id                  String               @id @default(cuid())
  content             String
  role                MessageRole
  llmModel            String
  metadata            Json?
  sequence            Int
  promptTokens        Int?
  completionTokens    Int?
  totalTokens         Int?
  finishReason        String?
  createdAt           DateTime             @default(now())
  editedAt            DateTime?
  taskId              String
  variantId           String?
  task                Task                 @relation("TaskMessages", fields: [taskId], references: [id], onDelete: Cascade)
  variant             Variant?             @relation("VariantMessages", fields: [variantId], references: [id], onDelete: Cascade)
  pullRequestSnapshot PullRequestSnapshot?
  stackedTaskId       String?
  stackedTask         Task?                @relation("StackedTask", fields: [stackedTaskId], references: [id], onDelete: SetNull)

  @@index([taskId, sequence])
  @@index([variantId, sequence])
  @@index([taskId, role, sequence])
  @@index([llmModel, createdAt])
}

model TaskSession {
  id           String    @id @default(cuid())
  podName      String?
  podNamespace String?
  isActive     Boolean   @default(true)
  connectionId String?
  createdAt    DateTime  @default(now())
  endedAt      DateTime?
  variantId    String
  variant      Variant   @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId, isActive])
}

model CodebaseUnderstanding {
  id           String   @id @default(nanoid())
  repoFullName String   @unique
  repoUrl      String
  content      Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks  Task[]

  @@index([repoFullName])
}

model Memory {
  id       String         @id @default(cuid())
  content  String
  category MemoryCategory

  // Repository-specific memories only
  repoFullName String
  repoUrl      String

  // User and task context
  userId    String
  taskId    String
  variantId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task    Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  variant Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([userId, repoFullName])
  @@index([taskId])
  @@index([variantId])
  @@index([category])
}

model PullRequestSnapshot {
  id String @id @default(cuid())

  status      PullRequestStatus
  title       String
  description String

  filesChanged Int
  linesAdded   Int
  linesRemoved Int
  commitSha    String

  createdAt DateTime @default(now())

  messageId String      @unique
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("pull_request_snapshot")
}

enum TaskStatus {
  STOPPED
  INITIALIZING
  ARCHIVED
  RUNNING
  COMPLETED
  FAILED
}

enum VariantStatus {
  INITIALIZING
  RUNNING
  COMPLETED
  FAILED
  STOPPED
}

enum PullRequestStatus {
  CREATED
  UPDATED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InitStatus {
  INACTIVE
  PREPARE_WORKSPACE
  CREATE_VM
  WAIT_VM_READY
  VERIFY_VM_WORKSPACE
  START_BACKGROUND_SERVICES
  INSTALL_DEPENDENCIES
  COMPLETE_SHADOW_WIKI
  ACTIVE
}

model UserSettings {
  id               String   @id @default(cuid())
  userId           String   @unique
  memoriesEnabled  Boolean  @default(true)
  autoPullRequest  Boolean  @default(false)
  enableShadowWiki Boolean  @default(true)
  enableIndexing   Boolean  @default(false)
  selectedModels   String[] @default([])
  rules            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

enum MemoryCategory {
  INFRA
  SETUP
  STYLES
  ARCHITECTURE
  TESTING
  PATTERNS
  BUGS
  PERFORMANCE
  CONFIG
  GENERAL
}
