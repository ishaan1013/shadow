generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  tasks         Task[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Task {
  id          String     @id @default(cuid())
  title       String?
  description String?
  status      TaskStatus @default(PENDING)

  // Git repo config
  repoUrl String
  branch  String @default("main")

  // Execution config
  mode TaskMode @default(FULL_AUTO)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages    ChatMessage[]
  commands    TerminalCommand[]
  fileChanges FileChange[]
  artifacts   Artifact[]
  sessions    TaskSession[]
}

model ChatMessage {
  id       String      @id @default(cuid())
  content  String
  role     MessageRole
  llmModel String? // Model used for this message (only for ASSISTANT messages)
  metadata Json? // Enhanced metadata with usage, finish reason, etc

  // Message ordering - critical for conversation flow
  sequence Int // Explicit sequence number within task to guarantee ordering

  // Usage tracking (denormalized for easier querying)
  promptTokens     Int? // Input tokens
  completionTokens Int? // Output tokens  
  totalTokens      Int? // Total tokens
  finishReason     String? // stop, length, content-filter, etc

  createdAt DateTime @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, sequence]) // Order by sequence first for correct conversation flow
  @@index([taskId, createdAt])
  @@index([llmModel, createdAt]) // For usage analytics
}

model TerminalCommand {
  id           String  @id @default(cuid())
  command      String
  output       String?
  exitCode     Int?
  workingDir   String?
  isBackground Boolean @default(false)

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
}

model FileChange {
  id         String  @id @default(cuid())
  filePath   String
  operation  FileOp
  oldContent String? // For edits/deletes
  newContent String? // For creates/edits
  diffPatch  String? // Git-style diff

  createdAt DateTime @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
}

model Artifact {
  id          String       @id @default(cuid())
  name        String
  type        ArtifactType
  description String?

  // Storage info
  s3Key    String? // S3 object key
  efsPath  String? // EFS file path
  size     Int? // Size in bytes
  mimeType String?

  createdAt DateTime @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
}

model TaskSession {
  id           String  @id @default(cuid())
  podName      String? // Kubernetes pod name
  podNamespace String?
  isActive     Boolean @default(true)

  // WebSocket connection info
  connectionId String?

  createdAt DateTime  @default(now())
  endedAt   DateTime?

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, isActive])
}

// Enums
enum TaskStatus {
  PENDING
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskMode {
  FULL_AUTO
  INTELLIGENT_AUTO
  MANUAL
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

enum FileOp {
  CREATE
  UPDATE
  DELETE
  RENAME
  MOVE
}

enum ArtifactType {
  CODE_SNAPSHOT // Full workspace zip
  DIFF_PATCH // Git patch file
  LOG_FILE // Execution logs
  TEST_REPORT // Test results
  BUILD_OUTPUT // Compiled artifacts
  BINARY // Executables, images, etc
}
