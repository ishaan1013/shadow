generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  tasks         Task[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  // GitHub App installation data
  githubInstallationId String? // GitHub App installation ID
  githubAppConnected   Boolean @default(false) // Whether GitHub App is installed

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(INITIALIZING)

  // Git repo config
  repoUrl       String
  workspacePath String? // Store task-specific workspace path

  // Git-first branch management
  baseBranch    String // Original branch the task was created from
  shadowBranch  String // AI working branch (shadow/task-{taskId})
  baseCommitSha String // Commit SHA when task started

  // Simplified initialization tracking
  initializationStatus InitializationStatus @default(PENDING)
  currentInitStep      InitStepType?

  // Execution config
  mode TaskMode @default(FULL_AUTO)

  // Cleanup tracking
  workspaceCleanedUp Boolean @default(false)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages    ChatMessage[]
  commands    TerminalCommand[]
  sessions    TaskSession[]
  todos       Todo[]
}

model Todo {
  id      String     @default(cuid())
  content String
  status  TodoStatus @default(PENDING)

  // Ordering within task
  sequence Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([taskId, id])
  @@index([taskId, sequence])
  @@index([taskId, status])
}

model ChatMessage {
  id       String      @id @default(cuid())
  content  String
  role     MessageRole
  llmModel String? // Model used for this message (only for ASSISTANT messages)
  metadata Json? // Enhanced metadata with usage, finish reason, etc

  // Message ordering - critical for conversation flow
  sequence Int // Explicit sequence number within task to guarantee ordering

  // Usage tracking (denormalized for easier querying)
  promptTokens     Int? // Input tokens
  completionTokens Int? // Output tokens  
  totalTokens      Int? // Total tokens
  finishReason     String? // stop, length, content-filter, etc

  createdAt DateTime @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, sequence]) // Order by sequence first for correct conversation flow
  @@index([taskId, role, sequence]) // For efficient tool message lookups
  @@index([llmModel, createdAt]) // For usage analytics
}

model TerminalCommand {
  id           String  @id @default(cuid())
  command      String
  output       String?
  exitCode     Int?
  workingDir   String?
  isBackground Boolean @default(false)

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
}


model TaskSession {
  id           String  @id @default(cuid())
  podName      String? // Kubernetes pod name
  podNamespace String?
  isActive     Boolean @default(true)

  // WebSocket connection info
  connectionId String?

  createdAt DateTime  @default(now())
  endedAt   DateTime?

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, isActive])
}

// Enums
enum TaskStatus {
  STOPPED
  INITIALIZING
  ARCHIVED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskMode {
  FULL_AUTO
  INTELLIGENT_AUTO
  MANUAL
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}


enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum InitializationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum InitStepType {
  CLONE_REPOSITORY
  PROVISION_MICROVM
  SETUP_ENVIRONMENT
  INSTALL_DEPENDENCIES
  CONFIGURE_TOOLS
  VALIDATE_SETUP
  // Remote mode specific steps
  CREATE_POD
  WAIT_SIDECAR_READY
  VERIFY_WORKSPACE
  CLEANUP_POD
}
